@using MyoFibril.Domain.Entities;
@using MyoFibril.Domain.Models;
@using MyoFibril.MAUIBlazorApp.Components.DescribeSetComponent
@using MyoFibril.MAUIBlazorApp.Components.SetSummaryList
@using MyoFibril.MAUIBlazorApp.Services;
@using MyoFibril.MAUIBlazorApp.Services.Local;
@inject IAddExerciseService _addExerciseService;
@inject IBuildActivityService _buildActivityService;
@inject ILocalOptionsService _localOptionsService;

@if (!_isAddingSet)
{
    <button class="form-control btn btn-info" @onclick="ClickedAddSet">Add Set</button>
    <SetSummaryListComponent IncompletePerformedExercise="_incompletePerformedExercise"></SetSummaryListComponent>
}
else{
    <DescribeSetComponent OnCompletedSet="HandleCompletedSet" OnCanceled="HandleCancelAddSet"></DescribeSetComponent>
}

<button class="form-control btn btn-success" @onclick="ClickedSubmitPerformedExercise">@_submitPerformedExerciseButtonLabel</button>

@code {
    [Parameter]
    public ExerciseEntity SelectedExerciseType { get; set; }
    private PerformedExerciseEntity _incompletePerformedExercise;
    private bool _isAddingSet = false;
    protected override void OnInitialized()
    {
        _incompletePerformedExercise = new PerformedExerciseEntity
        {
            Exercise = SelectedExerciseType
        };
    }

    private string _submitPerformedExerciseButtonLabel = "Save";
    public void ClickedAddSet()
    {
        _isAddingSet = true;
    }

    public void ClickedSubmitPerformedExercise()
    {
        _buildActivityService.AddPerformedExercise(_incompletePerformedExercise);
        _addExerciseService.CloseModal();
    }

    public void ClickedCancelSelectedExercise()
    {
        _addExerciseService.CancelSelectedExercise();
    }

    public void HandleCompletedSet(SetInfo set)
    {
        _incompletePerformedExercise.Sets.Add(set);
        _isAddingSet = false;
        StateHasChanged();
    }

    public void HandleCancelAddSet()
    {
        _isAddingSet = false;
        StateHasChanged();
    }
}
