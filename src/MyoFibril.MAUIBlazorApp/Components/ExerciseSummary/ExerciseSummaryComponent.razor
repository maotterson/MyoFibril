@using MyoFibril.Contracts.WebAPI.Models;
@using MyoFibril.Domain.Entities;
@using MyoFibril.Domain.Enums;
@using MyoFibril.Domain.Models;
@using MyoFibril.MAUIBlazorApp.Services.Local;
@inject IBuildActivityService _buildActivityService;
<div class="list-group-item bg-dark text-light">
    <div class="container-fluid">
        <div class="row">
            <h5 class="col">@PerformedExercise.Exercise!.Name</h5>
            <div>
                <span class="fs-5 oi oi-x col text-danger x-btn mt-0 pt-2" @onclick="ClickedRemovePerformedExercise"></span>
            </div>
        </div>
    </div>
    
    @foreach(var set in PerformedExercise.Sets.Select((value, i) => new { i, value}))
    {
        var setNumber = set.i + 1;
        <p class ="card-text">
            <span>Set #@setNumber:&nbsp;</span>
            @if (set.value.Weight is null && set.value.Reps is null)
            {
                <span>No information</span>
            }
            @if(set.value.Weight is not null)
            {
                <span>@set.value.Weight.Value @DisplayUnits(set.value.Weight.Units)&nbsp;</span>
            }
            @if (set.value.Reps is not null)
            {
                <span>x @set.value.Reps reps</span>
            }
        </p>
    }
   
</div>

@code {

    [Parameter]
    public PerformedExerciseEntity PerformedExercise { get; set; }
    [Parameter]
    public Action<PerformedExerciseEntity> OnClickRemoveCallback { get; set; }
    private string DisplayUnits(WeightInfoUnit unit) => unit switch
    {
        WeightInfoUnit.Pounds => "lbs",
        WeightInfoUnit.Kilograms => "kg",
        _ => throw new Exception($"Exception in {nameof(DisplayUnits)}: unknown unit")
    };

    private void ClickedRemovePerformedExercise()
    {
        RemovePerformedExercise(PerformedExercise);
    }

    public void RemovePerformedExercise(PerformedExerciseEntity performedExercise)
    {
        _buildActivityService.RemovePerformedExercise(performedExercise);
    }


}
