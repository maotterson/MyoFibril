@using MyoFibril.Contracts.WebAPI.Models;
@using MyoFibril.Domain.Entities;
@using MyoFibril.Domain.Enums;
@using MyoFibril.Domain.Models;
@using MyoFibril.MAUIBlazorApp.Services.Local;
@inject IBuildActivityService _buildActivityService;

<div class="card" style="width: 18rem;">
  <div class="card-body">
    <h5 class="card-title">@PerformedExercise.Exercise?.Name</h5>
        @foreach(var set in PerformedExercise.Sets.Select((value, i) => new { i, value}))
        {
            var setNumber = set.i + 1;
            <p class ="card-text">
                <span>Set #@setNumber:&nbsp;</span>
                @if (set.value.Weight is null && set.value.Reps is null)
                {
                    <span>No information</span>
                }
                @if(set.value.Weight is not null)
                {
                    <span>@set.value.Weight.Value @DisplayUnits(set.value.Weight.Units)&nbsp;</span>
                }
                @if (set.value.Reps is not null)
                {
                    <span>x @set.value.Reps reps</span>
                }
            </p>
        }
    <button class="btn btn-primary" @onclick="ClickedRemovePerformedExercise">Remove</button>
  </div>
</div>

@code {

    [Parameter]
    public PerformedExerciseEntity PerformedExercise { get; set; }
    [Parameter]
    public Action<PerformedExerciseEntity> OnClickRemoveCallback { get; set; }
    private string DisplayUnits(WeightInfoUnit unit) => unit switch
    {
        WeightInfoUnit.Pounds => "lbs",
        WeightInfoUnit.Kilograms => "kg",
        _ => throw new Exception($"Exception in {nameof(DisplayUnits)}: unknown unit")
    };

    private void ClickedRemovePerformedExercise()
    {
        RemovePerformedExercise(PerformedExercise);
    }

    public void RemovePerformedExercise(PerformedExerciseEntity performedExercise)
    {
        _buildActivityService.RemovePerformedExercise(performedExercise);
    }


}
