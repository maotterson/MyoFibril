@using MyoFibril.Domain.Entities;
@using MyoFibril.MAUIBlazorApp.Services;
@using MyoFibril.Contracts.WebAPI.Models;
@using MyoFibril.MAUIBlazorApp.Components.AddExerciseToActivity
@using MyoFibril.MAUIBlazorApp.Components.ExerciseSummary;
@using MyoFibril.MAUIBlazorApp.Services.Local;
@inject CreateActivityViewModel _createActivityViewModel
@inject IAddExerciseService _addExerciseService
@inject IBuildActivityService _buildActivityService;

<h1>Create New Activity</h1>

@if (_modalOpen)
{
    <AddExerciseToActivityComponent></AddExerciseToActivityComponent>
}

<div>
    <span>Name</span>
    <input @bind="InputName" />

    @foreach (var exercise in _exercises)
    {
        <ExerciseSummaryComponent PerformedExercise="exercise" OnClickRemoveCallback="RemovePerformedExercise"></ExerciseSummaryComponent>
    }

    <!-- Add button to add a new input -->
    <button class="btn btn-primary" @onclick="AddExerciseButtonClicked">Add Exercise</button>

    <button @onclick="CreateButtonClicked">Create</button>
</div>

@code {
    private bool _modalOpen => _addExerciseService.IsModalOpen();
    private List<PerformedExerciseEntity> _exercises => _buildActivityService.GetPerformedExercises();
    public string InputName { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        _addExerciseService.OnModalStateChanged += StateHasChanged;
        _buildActivityService.OnBuildActivityStateChanged += StateHasChanged;
    }
    private void AddExerciseButtonClicked()
    {
        _addExerciseService.OpenModal();
    }
    private async Task CreateButtonClicked()
    {
        var activity = new ActivityEntity
            {
                DateCreated = DateTimeOffset.UtcNow,
                Name = InputName,
                PerformedExercises = _exercises
            };
        await _createActivityViewModel.CreateActivity(activity);
        StateHasChanged();
    }
    public void Dispose()
    {
        _addExerciseService.OnModalStateChanged -= StateHasChanged;
        _buildActivityService.OnBuildActivityStateChanged -= StateHasChanged;
    }
    public void RemovePerformedExercise(PerformedExerciseEntity performedExercise)
    {
        _buildActivityService.RemovePerformedExercise(performedExercise);
    }
}
