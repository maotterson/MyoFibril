@using MyoFibril.Domain.Entities;
@using MyoFibril.MAUIBlazorApp.Services;
@using MyoFibril.Contracts.WebAPI.Models;
@using MyoFibril.MAUIBlazorApp.Components.AddExerciseToActivity
@using MyoFibril.MAUIBlazorApp.Components.ExerciseSummary;
@using MyoFibril.MAUIBlazorApp.Services.Local;
@using MyoFibril.MAUIBlazorApp.Services.UI;
@using Xamarin.CommunityToolkit;
@inject CreateActivityViewModel _createActivityViewModel
@inject IAddExerciseService _addExerciseService
@inject IBuildActivityService _buildActivityService
@inject IExerciseOptionsDrawerManager _exerciseOptionsDrawerManager

@implements IDisposable

@if (_modalOpen)
{
    <AddExerciseToActivityComponent></AddExerciseToActivityComponent>
}

<div>
    <input type="text" class="form-control activity-input" @bind="InputName" placeholder="Activity Name" />
    <button class="form-control btn btn-success" @onclick="CreateButtonClicked">Done</button>
    <hr class="mt-1 mb-1" />

    <div class="card text-white bg-dark">
        <div class="list-group list-group-flush">
        @foreach (var exercise in _exercises)
        {
            <ExerciseSummaryComponent OnClickExerciseSettings="HandleClickExerciseSettings" PerformedExercise="exercise"></ExerciseSummaryComponent>
        }
        </div>
        <button class="form-control btn btn-primary" @onclick="AddExerciseButtonClicked">Add Exercise</button>
    </div>
    
    @if (!string.IsNullOrEmpty(_error))
    {
        <p>Error creating activity: @_error</p>
    }
</div>

@if (_activityOptionsDrawerOpen)

@code {
    private string _error = string.Empty;
    private bool _modalOpen => _addExerciseService.IsModalOpen();
    private bool _activityOptionsDrawerOpen => 
    private List<PerformedExerciseEntity> _exercises => _buildActivityService.GetPerformedExercises();
    public string InputName { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        _addExerciseService.OnModalStateChanged += StateHasChanged;
        _buildActivityService.OnBuildActivityStateChanged += StateHasChanged;
    }
    private void AddExerciseButtonClicked()
    {
        _addExerciseService.OpenModal();
    }

    private void HandleClickExerciseSettings(PerformedExerciseEntity exercise)
    {
        
    }

    private async Task CreateButtonClicked()
    {
        try
        {
            if(InputName == string.Empty)
            {
                _error = "Activity must have a name.";
                return;
            }
            var activity = new ActivityEntity
                {
                    DateCreated = DateTimeOffset.UtcNow,
                    Name = InputName,
                    PerformedExercises = _exercises
                };
            var response = await _createActivityViewModel.CreateActivity(activity);
            _error = string.Empty;
        }
        catch(HttpRequestException ex)
        {
            _error = ex.Message;
        }
        finally
        {
            StateHasChanged();
        }
    }
    void IDisposable.Dispose()
    {
        _addExerciseService.OnModalStateChanged -= StateHasChanged;
        _buildActivityService.OnBuildActivityStateChanged -= StateHasChanged;
    }
}
