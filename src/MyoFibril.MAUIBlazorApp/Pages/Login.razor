@page "/Login"
@using MyoFibril.Domain.Common;
@using MyoFibril.MAUIBlazorApp.Services.Local;
@layout LoggedOutLayout
@inject IUserService _userService
@inject NavigationManager _navigationManager

<div>
    <input type="text" class="form-control" placeholder="Username" @bind="_username"/>
    <input type="password" class="form-control" placeholder="Password" @bind="_password" />
    <button class="btn btn-primary form-control" @onclick="HandleLoginClick">Login</button>

    <p>Don't have an account? <a href="/Register">Create new account.</a></p>
</div>

@if (!string.IsNullOrEmpty(_error))
{
    <p class="text-danger">@_error</p>
}

@code {
    private string _username;
    private string _password;
    private bool _isHandlingLogin = false;

    private string _error;

    private async Task HandleLoginClick()
    {
        // validate client side
        var loginStatus = ValidateLogin();
        if (!loginStatus.isValid)
        {
            _error = loginStatus.errorMessage;
            return;
        }

        // make call to api
        if (_isHandlingLogin) return;
        _isHandlingLogin = true;
        var isSuccessfulLogin = await _userService.CheckLoginCredentials(_username, _password);
        _isHandlingLogin = false;

        if (!isSuccessfulLogin)
        {
            _error = "Username and password do not match.";
            return;
        }
        _navigationManager.NavigateTo("/");
    }

    private (bool isValid, string? errorMessage) ValidateLogin()
    {
        var validationStatus = CredentialsValidator.ValidateUsername(_username);
        if (!validationStatus.isValid)
        {
            return validationStatus;
        }

        validationStatus = CredentialsValidator.ValidatePasswordAndConfirmPassword(_password, _password); // somewhat hacky, could create a separate method without confirm password check
        if (!validationStatus.isValid)
        {
            return validationStatus;
        }

        return (true, null);
    }
}
