@page "/Register"
@using MyoFibril.Contracts.WebAPI.Auth.Models;
@using MyoFibril.Domain.Utils;
@using MyoFibril.Domain.Common;
@layout LoggedOutLayout
@inject NavigationManager _navigationManager
<div>
    <input type="text" class="form-control" placeholder="Username" @bind="_username"/>
    <input type="email" class="form-control" placeholder="Email address" @bind="_email" />
    <input type="password" class="form-control" placeholder="Password" @bind="_password" />
    <input type="password" class="form-control" placeholder="Confirm password" @bind="_confirmPassword" />
    <button class="btn btn-primary form-control" @onclick="HandleClickCreateAccount">Create Account</button>

    @if (!string.IsNullOrEmpty(_error))
    {
        <div class="alert alert-danger" role="alert">
            <span>@_error</span>
        </div>
    }
</div>


@code {
    private string _username = string.Empty;
    private string _email = string.Empty;
    private string _password = string.Empty;
    private string _confirmPassword = string.Empty;
    private string _error = string.Empty;

    public async Task HandleClickCreateAccount()
    {
        // validate credentials
        _error = string.Empty;
        var credentialsStatus = IsValidCredentials();
        if (!credentialsStatus.isValid)
        {
            _error = credentialsStatus.errorMessage;
        }

        // process valid credentials
        var credentials = new UserRegisterCredentials
            {
                Username = _username,
                Password = _password,
                Email = _email
            };
        var response = _userService.CreateAccountWithCredentials(credentials);
        if (!response.Success)
        {
            _error = "Unknown server error. Please try again later.";
            return;
        }

        // store tokens

        // redirect to main page
        _navigationManager.NavigateTo("/");
    }

    private (bool isValid, string? errorMessage) IsValidCredentials()
    {
        // validate username
        var credentialsStatus = CredentialsValidator.ValidateUsername(_username);
        if (!credentialsStatus.isValid) return credentialsStatus;

        // validate email
        credentialsStatus = CredentialsValidator.ValidateEmail(_email);
        if (!credentialsStatus.isValid) return credentialsStatus;

        // validate password
        credentialsStatus = CredentialsValidator.ValidatePasswordAndConfirmPassword(_password, _confirmPassword);
        if (!credentialsStatus.isValid) return credentialsStatus;

        // passed validation
        return (true, null);
    }
}
